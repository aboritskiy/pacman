package ru.tonybo.pacman.game.model;

import android.os.Handler;
import android.os.Message;
import ru.tonybo.pacman.game.MotionDirection;
import ru.tonybo.pacman.game.TileType;

public class GameModel {
	public GameModel (Handler gameOverHandler) {
		this.gameOverHandler = gameOverHandler;
		
		pacManModel = new PacManModel(fieldPath, TileType.PACMAN_PATH);
		blinkyModel = new GhostModel(
			fieldPath,
			TileType.GHOST_PATH,
			TileType.GHOST_HOME,
			pacManModel,
			new IntPosition (14,11),
			new IntPosition (26,0),
			0
		);
		
		pinkyModel = new PinkyModel(
			fieldPath,
			TileType.GHOST_PATH,
			TileType.GHOST_HOME,
			pacManModel,
			new IntPosition (14,14),
			new IntPosition (3,0),
			0
		);
		
		inkeyModel = new InkeyModel(
			fieldPath,
			TileType.GHOST_PATH,
			TileType.GHOST_HOME,
			pacManModel,
			new IntPosition (12,14),
			new IntPosition (3,30),
			30,
			blinkyModel
		);
		
		clydeModel = new ClydeModel(
			fieldPath,
			TileType.GHOST_PATH,
			TileType.GHOST_HOME,
			pacManModel,
			new IntPosition (16,14),
			new IntPosition (3,30),
			60
		); 
		
		resetGame(0L);
	}
	
	public PacManModel getPacManModel () {
		return pacManModel;
	}
	
	public GhostModel getBlinkyModel () {
		return blinkyModel;
	}
	
	public GhostModel getPinkyModel () {
		return pinkyModel;
	}
	
	public GhostModel getInkeyModel () {
		return inkeyModel;
	}
	
	public GhostModel getClydeModel () {
		return clydeModel;
	}
	
	public int[][] getTabletPath () {
		return tabletPath;
	}
	
	public int[][] getEnergizerPath () {
		return energizerPath;
	}
	
	public int getEnergizerCount () {
		return energizerCount;
	}
	
	
	public int getScore () {
		return score;
	}
	
	public int getLives () {
		return lives;
	}
	
	public int getLevel () {
		return level;
	}
	
	public void setMotionDirection(MotionDirection md) {
		pacManModel.setMotionDirection(md);		
	}
	
	public GameState getGameState() {
		return gameState;
	}
	
	public void step (long time) {
		if (gameState == GameState.LEVEL_INTRO) {
			long delta = time - enteredCurrentGameStateAt;
			if (delta > gameState.duration()) {
				gameState = GameState.GAME;
				enteredCurrentGameStateAt = time;
			}
		} else if (gameState == GameState.LEVEL_COMPLETED) {
			long delta = time - enteredCurrentGameStateAt;
			if (delta > gameState.duration()) {
				level++;
				
				resetLevel(time);
				gameState = GameState.LEVEL_INTRO;
				enteredCurrentGameStateAt = time;
				
			}
		} else if (gameState == GameState.GAME_OVER) {
			
			long delta = time - enteredCurrentGameStateAt;
			if (delta > gameState.duration()) {
				gameState = GameState.LEVEL_INTRO;
				enteredCurrentGameStateAt = time;
				gameOverHandler.obtainMessage().sendToTarget();
			}
		} else {
			gameTime = time;
		}
			
		pacManModel.step(gameTime);
		blinkyModel.step(gameTime);
		pinkyModel.step(gameTime);
		inkeyModel.step(gameTime);
		clydeModel.step(gameTime);
		
		IntPosition pacManPosition = pacManModel.getCurrentPosition();
		
		if (tabletPath[pacManPosition.y][pacManPosition.x] > 0) {
			tabletPath[pacManPosition.y][pacManPosition.x] = 0;
			score += TABLET_SCORE;
			tabletsEaten++;
			if(tabletsEaten >= MAX_TABLETS) {
				gameState = GameState.LEVEL_COMPLETED;
				enteredCurrentGameStateAt = gameTime;
			}
			blinkyModel.tabletEaten(gameTime, tabletsEaten);
			pinkyModel.tabletEaten(gameTime, tabletsEaten);
			inkeyModel.tabletEaten(gameTime, tabletsEaten);
			clydeModel.tabletEaten(gameTime, tabletsEaten);
		} else if (energizerPath[pacManPosition.y][pacManPosition.x] > 0) {
			energizerPath[pacManPosition.y][pacManPosition.x] = 0;
			ghostsEaten = 0;
			score += ENERGIZER_SCORE;
			
			blinkyModel.frighten();
			pinkyModel.frighten();
			inkeyModel.frighten();
			clydeModel.frighten();
		}
		
		checkGhostHit( pacManPosition, blinkyModel);
		checkGhostHit( pacManPosition, pinkyModel);
		checkGhostHit( pacManPosition, inkeyModel);
		checkGhostHit( pacManPosition, clydeModel);
	}
	
	private void checkGhostHit (IntPosition pacManPosition, GhostModel ghost) {
		if(pacManPosition.equals(ghost.getCurrentPosition())) {
			if (ghost.isFrightened()) {
				/**
				 * TODO: force ghost to return home
				 * show earned points in place
				 */
				ghost.eaten(GHOST_SCORE[ghostsEaten]);
				score += GHOST_SCORE[ghostsEaten];
				ghostsEaten++;
				if (ghostsEaten >= GHOST_SCORE.length) {
					ghostsEaten = GHOST_SCORE.length - 1;
				}
				
			} else if (!ghost.isReturning()){
				/**
				 * TODO: lower lives or process game over
				 */
				
				lives--;
				if (lives < 0) {
					gameState = GameState.GAME_OVER;
					enteredCurrentGameStateAt = gameTime;
				} else {
					resetPersons();
				}
			}
		}
	}
	
	private void resetPersons () {
		pacManModel.reset(gameTime);
		blinkyModel.reset(gameTime);
		pinkyModel.reset(gameTime);
		inkeyModel.reset(gameTime);
		clydeModel.reset(gameTime);
	}
	
	public void resetLevel (long time) {
		for (int j = 0; j < fieldPath.length; j++) {
			for (int i = 0; i < fieldPath[j].length; i++) {
				if ((fieldPath[j][i] & TileType.TABLET) != 0)
					tabletPath[j][i] = 1;
				else 
					tabletPath[j][i] = 0;
				
				if ((fieldPath[j][i] & TileType.ENERGIZER) != 0) {
					energizerPath[j][i] = 1;
					energizerCount ++;
				} else { 
					energizerPath[j][i] = 0;
				}
			}
		}
		
		gameTime = time;
		
		ghostsEaten = 0;
		tabletsEaten = 0;
		
		resetPersons();
		gameState = GameState.LEVEL_INTRO;
		enteredCurrentGameStateAt = gameTime;
	}
	
	public void resetGame (long time) {
		level = 1;
		lives = MAX_LIVES;
		
		resetLevel(time);
	}
	
	
	private PacManModel pacManModel;
	private GhostModel blinkyModel;
	private PinkyModel pinkyModel;
	private InkeyModel inkeyModel;
	private ClydeModel clydeModel;
	
    private final int[][] fieldPath = {
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00 },
			{ 0x00,0x00,0x52,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x52,0x00,0x00 },
			{ 0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x12,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x12,0x00,0x05,0x01,0x05,0x01,0x05,0x00,0x00,0x12,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x12,0x12,0x12,0x12,0x12,0x12,0x32,0x12,0x12,0x12,0x00,0x05,0x00,0x05,0x00,0x05,0x00,0x00,0x12,0x12,0x12,0x32,0x12,0x12,0x12,0x12,0x12,0x12,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x12,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x32,0x00,0x00 },
			{ 0x00,0x00,0x52,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x12,0x12,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x52,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00 },
			{ 0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x32,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00 },
			{ 0x00,0x00,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x32,0x00,0x00 },
			{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 }
	};
    
    private final int[][] tabletPath = new int[fieldPath.length][fieldPath[0].length];
    private final int[][] energizerPath = new int[fieldPath.length][fieldPath[0].length];
    
    private volatile int energizerCount = 0;
    
    private volatile int score = 0;
    private long gameTime = 0L;
    
    private final int MAX_LIVES = 3;
    private volatile int lives = MAX_LIVES;
    
    private final int MAX_TABLETS = 240;
    private volatile int tabletsEaten = 0;
    
    private final int TABLET_SCORE = 10;
    private final int ENERGIZER_SCORE = 50;
    private final int[] GHOST_SCORE = {200, 400, 800, 1600};
    private int ghostsEaten = 0;
    private int level = 1;
    
    private GameState gameState = GameState.LEVEL_INTRO;
    private long enteredCurrentGameStateAt = 0L;
    
    private Handler gameOverHandler;
}